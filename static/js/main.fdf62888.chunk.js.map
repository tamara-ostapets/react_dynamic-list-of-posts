{"version":3,"sources":["api/api.js","components/Post/Post.jsx","types.js","components/PostsList/PostsList.jsx","api/posts.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/comments.js","App.jsx","api/users.js","index.js"],"names":["request","url","options","a","fetch","response","json","result","data","Post","PropTypes","shape","comments","array","title","string","body","id","number","userId","selectedPost","post","handleClick","className","onClick","type","PostsList","setPost","useState","posts","setPosts","useEffect","getUserPosts","then","map","filter","key","NewCommentForm","postId","addComment","name","setName","email","setEmail","setBody","onSubmit","e","preventDefault","newComment","uuidv4","submitHandler","value","placeholder","onChange","currentTarget","PostDetails","setComments","isVisisble","setVisibility","commentsFomServer","postComments","comment","length","commentId","prev","App","users","setUsers","setUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fdf62888.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, options) => {\n  const response = await fetch(`${BASE_URL}${url}`);\n  const result = await response.json();\n\n  return result.data;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TypePost } from '../../types';\n\nexport const Post = ({\n  selectedPost,\n  post,\n  handleClick,\n}) => {\n  const clickHandlerOpen = (postOnSelection) => {\n    handleClick(postOnSelection);\n  };\n\n  const clickHandlerClose = () => {\n    handleClick({});\n  };\n\n  return (\n    <li className=\"PostsList__item\">\n      <div>\n        <b>\n          [User #\n          {post.userId}\n          ]:\n          {' '}\n        </b>\n        {post.title}\n      </div>\n\n      {(selectedPost.id !== post.id)\n        ? (\n          <button\n            onClick={() => {\n              clickHandlerOpen(post);\n            }}\n            type=\"button\"\n            className=\"PostsList__button button\"\n          >\n            Open\n          </button>\n        )\n        : (\n          <button\n            onClick={() => {\n              clickHandlerClose();\n            }}\n            type=\"button\"\n            className=\"PostsList__button button\"\n          >\n            Close\n          </button>\n        )\n      }\n    </li>\n  );\n};\n\nPost.propTypes = {\n  selectedPost: TypePost.isRequired,\n  post: TypePost.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TypePost = PropTypes.shape({\n  comments: PropTypes.array,\n  title: PropTypes.string,\n  body: PropTypes.string,\n  id: PropTypes.number,\n  userId: PropTypes.number,\n});\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { TypePost } from '../../types';\nimport './PostsList.scss';\nimport { getUserPosts, getAllPosts } from '../../api/posts';\nimport { Post } from '../Post/Post';\n\nexport const PostsList = ({\n  userId,\n  handleClick,\n  selectedPost,\n  setPost,\n}) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    if (userId === 0) {\n      getAllPosts()\n      // eslint-disable-next-line\n        .then((posts) => {\n          // eslint-disable-next-line\n          posts = posts.filter(post => (post.userId <= 10 && (post.userId)));\n\n          return posts;\n        })\n        .then(setPosts);\n\n      return;\n    }\n\n    getUserPosts(userId)\n    // eslint-disable-next-line\n      .then((posts) => {\n        setPosts(posts.map(post => ({\n          comments: [],\n          id: post.id,\n          userId: post.userId,\n          title: post.title,\n          body: post.body,\n        })));\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <Post\n            setPost={setPost}\n            selectedPost={selectedPost}\n            handleClick={handleClick}\n            key={post.id}\n            post={post}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  selectedPost: TypePost.isRequired,\n  setPost: PropTypes.func.isRequired,\n};\n","import { request } from './api';\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\nexport const getAllPosts = () => request(`/posts`);\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const NewCommentForm = ({ postId, addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    const newComment = {\n      postId,\n      name,\n      email,\n      body,\n      id: uuidv4(),\n    };\n\n    addComment(newComment);\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(e) => {\n        submitHandler(e);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={e => setName(e.currentTarget.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={e => setEmail(e.currentTarget.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={e => setBody(e.currentTarget.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostComments } from '../../api/comments';\nimport { TypePost } from '../../types';\n\nexport const PostDetails = ({ post }) => {\n  const [comments, setComments] = useState([]);\n  const [isVisisble, setVisibility] = useState(true);\n\n  useEffect(() => {\n    getPostComments(post.id)\n      .then(commentsFomServer => (!commentsFomServer\n        ? setComments([])\n        : setComments(commentsFomServer)));\n  }, [post.id]);\n\n  const addComment = (comment) => {\n    setComments(prev => [...prev, comment]);\n  };\n\n  const removeComment = (commentId) => {\n    setComments(prev => prev.filter(comment => comment.id !== commentId));\n  };\n\n  const postComments = comments.filter(comment => comment.postId === post.id);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {postComments.length === 0 && 'There is no comment to display'}\n        {(postComments.length > 0 && isVisisble === true) && (\n          <>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisibility(false);\n              }}\n            >\n              Hide\n              {' '}\n              {postComments.length}\n              {' '}\n              comments\n            </button>\n            <ul className=\"PostDetails__list\">\n\n              {postComments.map(comment => (\n                <li key={comment.id} className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeComment(comment.id, post.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n        {(postComments.length > 0 && isVisisble === false) && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              setVisibility(true);\n            }}\n          >\n            Show\n            {' '}\n            {postComments.length}\n            {' '}\n            comments\n          </button>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={post.id} addComment={addComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  post: TypePost.isRequired,\n};\n","import { request } from './api';\n\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getUsers } from './api/users';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPost, setPost] = useState({});\n\n  useEffect(() => {\n    getUsers()\n    // eslint-disable-next-line\n      .then((users) => {\n        // eslint-disable-next-line\n        users = users\n          .filter(({ id }) => id <= 10);\n\n        setUsers(users.map(({ name, id }) => ({\n          name, id,\n        })));\n      });\n  }, []);\n\n  const handleClick = (post) => {\n    setPost(post);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={(e) => {\n              setUserId(+e.currentTarget.value);\n            }}\n          >\n            <option key=\"0\" value=\"0\">All users</option>\n            {users.map(({ name, id }) => (\n              <option\n                key={id}\n                value={id}\n              >\n                {name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            setPost={setPost}\n            selectedPost={selectedPost}\n            handleClick={handleClick}\n            userId={userId}\n          />\n        </div>\n\n        {selectedPost.id && (\n          <div className=\"App__content\">\n            <PostDetails post={selectedPost} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => request(`/users`);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}